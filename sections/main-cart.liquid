{% comment %}
  Full Cart Page (OS 2.0)
  - Plain English labels
  - AJAX qty +/- and remove via /cart/change.js
  - Live subtotal refresh (via DOM swap)
  - Upsell: selectable mode (collection / tag / manual)
  - No free-shipping block
{% endcomment %}

<section class="cart-page layout__grid-box" aria-labelledby="cart-heading">
  <h1 id="cart-heading" class="page-title heading--2">Shopping Cart</h1>

  <div id="cart-container">
    {% if cart.item_count == 0 %}
      <p>Your cart is currently empty.</p>
      <a href="{{ routes.all_products_collection_url }}" class="btn" style="margin-top: 1rem;">Continue Shopping</a>
    {% else %}
      <div class="cart-container">
        <div class="cart-header">
          <div class="cart-col product-col">Product</div>
          <div class="cart-col price-col">Price</div>
          <div class="cart-col qty-col">Quantity</div>
          <div class="cart-col total-col">Total</div>
        </div>

        <div id="cart-items">
          {% for item in cart.items %}
            <div class="cart-item" data-line="{{ forloop.index }}" data-key="{{ item.variant_id }}">
              <div class="wrapper">
                <div class="cart-col product-col">
                  <div class="product-info">
                    {% if item.image %}
                      <picture>
                        <source
                          srcset="{{ item.image | image_url: width: 95, height: 100, crop: 'center', format: 'pjpg' }}"
                          type="image/jpeg"
                        >
                        <source
                          srcset="{{ item.image | image_url: width: 95, height: 100, crop: 'center', format: 'webp' }}"
                          type="image/webp"
                        >
                        <img
                          src="{{ item.image | image_url: width: 95, height: 100, crop: 'center' }}"
                          alt="{{ item.product.title }}"
                          class="product-image"
                          width="95"
                          height="100"
                        >
                      </picture>
                    {% endif %}
                    <div class="product-text">
                      <div class="product-titleWrapper">
                        <a href="{{ item.url }}">{{ item.product.title }}</a>

                        <div class="product-options">
                          {% for option in item.options_with_values %}
                            {% if option.name != 'Title' %}
                              <div class="line-item__option-block">
                                <span class="line-item__option">{{ option.name }}:</span>
                                <span class="line-item__value">{{ option.value }}</span>
                              </div>
                            {% endif %}
                          {% endfor %}
                        </div>

                        <div class="product-properties">
                          {%- for property in item.properties -%}
                            {%- assign property_first_char = property.first | slice: 0 -%}
                            {%- if property.last != blank and property_first_char != '_' -%}
                              <div class="product-option">
                                <span class="product-option__label">{{ property.first }}:</span>
                                <span class="product-option__value">
                                  {%- if property.last contains '/uploads/' -%}
                                    <a
                                      href="{{ property.last }}"
                                      class="link"
                                      target="_blank"
                                      aria-describedby="a11y-new-window-message"
                                    >
                                      {{ property.last | split: '/' | last }}
                                    </a>
                                  {%- else -%}
                                    {{ property.last | remove: 'yes' | remove: '[' | remove: ']' }}
                                  {%- endif -%}
                                </span>
                              </div>
                            {%- endif -%}
                          {%- endfor -%}
                        </div>
                      </div>

                      <button
                        class="remove-btn"
                        data-line-key="{{ item.key }}"
                        aria-label="Remove {{ item.product.title }}"
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                </div>

                <div class="cart-col price-col unit-price">
                  {% assign orig = item.original_price | plus: 0 %}
                  {% assign disc = item.final_price | plus: 0 %}
                  {% if orig > disc %}
                    <span class="original-price" style="text-decoration: line-through; color:#999;">
                      {{ item.original_price | money }}
                    </span>
                    <span class="discounted-price" style="color:#e53935; font-weight:bold; margin-left:8px;">
                      {{ item.final_price | money }} </span
                    ><br>
                    <span class="discount-label" style="color:#388e3c; font-size:0.9em; margin-left:8px;">
                      (You save {{ item.original_price | minus: item.final_price | money }})
                    </span>
                  {% else %}
                    <span class="regular-price">
                      {{ item.final_price | money }}
                    </span>
                  {% endif %}
                </div>

                <div class="cart-col qty-col">
                  <div class="qty-changer">
                    <button type="button" class="qty-btn qty-decrease minus-btn" data-line-key="{{ item.key }}">
                      âˆ’
                    </button>
                    <input
                      type="number"
                      class="cart-qty-input quantity-input"
                      value="{{ item.quantity }}"
                      data-line-key="{{ item.key }}"
                      min="1"
                      step="1"
                      inputmode="numeric"
                    >
                    <button type="button" class="qty-btn qty-increase plus-btn" data-line-key="{{ item.key }}">
                      +
                    </button>
                  </div>
                </div>
              </div>

              <div class="cart-col total-col line-total line-total-col">
                {% if item.original_line_price > item.line_price %}
                  <span class="original-price" style="text-decoration: line-through; color:#999;">
                    {{ item.original_line_price | money }}
                  </span>
                  <span class="discounted-price" style="color:#e53935; font-weight:bold; margin-left:8px;">
                    {{ item.line_price | money }}
                  </span>
                  <br>
                  <span class="discount-label" style="color:#388e3c; font-size:0.9em; margin-left:8px;">
                    (You save {{ item.original_line_price | minus: item.line_price | money }})
                  </span>
                {% else %}
                  <span class="regular-price">{{ item.line_price | money }}</span>
                {% endif %}
              </div>
            </div>
          {% endfor %}
        </div>

        <div class="cart-footer">
          <div class="cart-footer-subtotal">
            <p>
              <strong>Subtotal:</strong>
              <small>Tax included. Shipping calculated at checkout.</small>
            </p>
            <p>
              <span id="cart-subtotal">{{ cart.total_price | money }}</span>
            </p>
          </div>
          <div>
            <a href="/checkout" class="cart-footer-checkout">Checkout</a>
            <a href="{{ routes.all_products_collection_url }}" class="cart-footer-continue">Continue Shopping</a>
          </div>
        </div>

        {%- comment -%}
          Upsell area with three modes:
          - collection: show from a chosen collection (fallback 'all')
          - tag: show products matching a tag within a base collection (fallback 'all')
          - manual: show hand-picked products via blocks
        {%- endcomment -%}
        {% assign upsell_mode = section.settings.upsell_mode | default: 'collection' %}
        {% assign upsell_header = 'You might also like' %}

        {% if upsell_mode == 'manual' %}
          {% assign manual_blocks = section.blocks | where: 'type', 'manual_product' %}
          {% if manual_blocks.size > 0 %}
            <div class="cart-upsell" style="margin-top:2rem;">
              <h2>{{ upsell_header }}</h2>
              <ul
                class="upsell-grid"
                style="display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:1rem;list-style:none;padding:0;"
              >
                {% for b in manual_blocks limit: 4 %}
                  {% assign p = all_products[b.settings.product] %}
                  {% if p %}
                    <li class="upsell-card" style="border:1px solid #eee;padding:0.75rem;border-radius:6px;">
                      <a href="{{ p.url }}" style="text-decoration:none;color:inherit;">
                        {% if p.featured_image %}
                          {{ p.featured_image | image_url: width: 400 | image_tag: alt: p.title, loading: 'lazy' }}
                        {% endif %}
                        <div class="upsell-card__title" style="margin-top:0.5rem;font-weight:600;">{{ p.title }}</div>
                        <div class="upsell-card__price">{% render 'price', product: p %}</div>
                      </a>
                    </li>
                  {% endif %}
                {% endfor %}
              </ul>
            </div>
          {% endif %}

        {% elsif upsell_mode == 'tag' %}
          {% assign tag_query = section.settings.upsell_tag | strip %}
          {% if tag_query != blank %}
            {% assign base_handle = section.settings.upsell_tag_base | default: 'all' %}
            {% assign base_coll = collections[base_handle] %}
            {% if base_coll and base_coll.products_count > 0 %}
              <div class="cart-upsell" style="margin-top:2rem;">
                <h2>{{ upsell_header }}</h2>
                <ul
                  class="upsell-grid"
                  style="display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:1rem;list-style:none;padding:0;"
                >
                  {% assign shown = 0 %}
                  {% for product in base_coll.products %}
                    {% if product.tags contains tag_query %}
                      <li class="upsell-card" style="border:1px solid #eee;padding:0.75rem;border-radius:6px;">
                        <a href="{{ product.url }}" style="text-decoration:none;color:inherit;">
                          {% if product.featured_image %}
                            {{
                              product.featured_image
                              | image_url: width: 400
                              | image_tag: alt: product.title, loading: 'lazy'
                            }}
                          {% endif %}
                          <div class="upsell-card__title" style="margin-top:0.5rem;font-weight:600;">
                            {{ product.title }}
                          </div>
                          <div class="upsell-card__price">{% render 'price', product: product %}</div>
                        </a>
                      </li>
                      {% assign shown = shown | plus: 1 %}
                      {% if shown >= 4 %}{% break %}{% endif %}
                    {% endif %}
                  {% endfor %}
                </ul>
              </div>
            {% endif %}
          {% endif %}

        {% else %}
          {% assign upsell_handle = section.settings.upsell_collection | default: 'all' %}
          {% assign upcoll = collections[upsell_handle] %}
          {% if upcoll and upcoll.products_count > 0 %}
            <div class="cart-upsell" style="margin-top:2rem;">
              <h2>{{ upsell_header }}</h2>
              <ul
                class="upsell-grid"
                style="display:grid;grid-template-columns:repeat(4,minmax(0,1fr));gap:1rem;list-style:none;padding:0;"
              >
                {% for product in upcoll.products limit: 4 %}
                  <li class="upsell-card" style="border:1px solid #eee;padding:0.75rem;border-radius:6px;">
                    <a href="{{ product.url }}" style="text-decoration:none;color:inherit;">
                      {% if product.featured_image %}
                        {{
                          product.featured_image
                          | image_url: width: 400
                          | image_tag: alt: product.title, loading: 'lazy'
                        }}
                      {% endif %}
                      <div class="upsell-card__title" style="margin-top:0.5rem;font-weight:600;">
                        {{ product.title }}
                      </div>
                      <div class="upsell-card__price">{% render 'price', product: product %}</div>
                    </a>
                  </li>
                {% endfor %}
              </ul>
            </div>
          {% endif %}
        {% endif %}
      </div>
    {% endif %}
  </div>
</section>

<!-- Loader -->
<div
  id="cart-loader"
  style="display:none;position:fixed;top:0;left:0;right:0;bottom:0;background:rgba(255,255,255,0.5);z-index:9999;text-align:center;padding-top:20%;"
>
  <p>Updating cart...</p>
</div>

<!-- INR Money Formatter with Commas -->
<script>
  if (typeof Shopify === 'undefined') {
    var Shopify = {};
  }
  Shopify.formatMoney = function (cents, format = 'â‚¹{{amount}}') {
    const formatINR = (amount) => {
      let [rupees, paise] = amount.toFixed(2).split('.');
      rupees = rupees.replace(/\B(?=(\d{2})+(?!\d))/g, ',').replace(/,(\d{3})$/, '$1'); // Indian comma rule
      return `${rupees}.${paise}`;
    };
    return format.replace('{{amount}}', formatINR(cents / 100));
  };
</script>

<!-- AJAX Cart Logic -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const loader = document.getElementById('cart-loader');

    const showLoader = () => (loader.style.display = 'block');
    const hideLoader = () => (loader.style.display = 'none');

    // Refreshes the whole cart section after cart update
    const refreshCart = () => {
      fetch(window.location.href)
        .then((res) => res.text())
        .then((html) => {
          const parser = new DOMParser();
          const newDoc = parser.parseFromString(html, 'text/html');
          const newCart = newDoc.querySelector('#cart-container');
          const currentCart = document.querySelector('#cart-container');
          if (newCart && currentCart) {
            currentCart.innerHTML = newCart.innerHTML;
          }
          hideLoader();
          rebindCartEvents(); // Rebind events after replacing HTML
        })
        .catch((e) => {
          console.error('Cart refresh error:', e);
          hideLoader(); // ensure loader never sticks
        });
    };

    // Handles updating item quantity or removing (quantity = 0)
    const updateCartLine = (lineKey, quantity) => {
      showLoader();
      fetch('/cart/change.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id: lineKey, quantity: quantity }),
      })
        .then((res) => res.json())
        .then(() => {
          refreshCart(); // Re-render cart after change
        })
        .catch((err) => {
          console.error('Cart update error:', err);
          hideLoader();
        });
    };

    // Rebind all event listeners after DOM refresh
    const rebindCartEvents = () => {
      // Quantity inputs
      document.querySelectorAll('.quantity-input').forEach((input) => {
        input.addEventListener('change', () => {
          let qty = parseInt(input.value);
          const key = input.dataset.lineKey;
          if (isNaN(qty) || qty < 1) qty = 1;
          input.value = qty;
          updateCartLine(key, qty);
        });
      });

      // Plus buttons
      document.querySelectorAll('.plus-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
          const key = btn.dataset.lineKey;
          const input = document.querySelector(`.quantity-input[data-line-key='${key}']`);
          const qty = parseInt(input.value || '0') + 1;
          input.value = qty;
          input.dispatchEvent(new Event('change'));
        });
      });

      // Minus buttons
      document.querySelectorAll('.minus-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
          const key = btn.dataset.lineKey;
          const input = document.querySelector(`.quantity-input[data-line-key='${key}']`);
          const qty = Math.max(1, parseInt(input.value || '1') - 1);
          input.value = qty;
          input.dispatchEvent(new Event('change'));
        });
      });

      // Remove buttons
      document.querySelectorAll('.remove-btn').forEach((btn) => {
        btn.addEventListener('click', () => {
          const key = btn.dataset.lineKey;
          updateCartLine(key, 0); // Remove item
        });
      });
    };

    // Initial bind on page load
    rebindCartEvents();
  });
</script>

{% schema %}
{
  "name": "Cart template",
  "settings": [
    { "type": "checkbox", "id": "show_vendor", "label": "Show vendor", "default": false },

    {
      "type": "select",
      "id": "upsell_mode",
      "label": "Upsell mode",
      "default": "collection",
      "options": [
        { "value": "collection", "label": "Auto â€” by collection" },
        { "value": "tag", "label": "Auto â€” by tag (within a collection)" },
        { "value": "manual", "label": "Manual â€” choose products" }
      ]
    },

    { "type": "collection", "id": "upsell_collection", "label": "Upsell collection by Collection" },

    {
      "type": "text",
      "id": "upsell_tag",
      "label": "Tag to match (for 'by tag' mode)",
      "placeholder": "e.g. upsell, best-seller"
    },
    {
      "type": "collection",
      "id": "upsell_tag_base",
      "label": "Search within collection by tag."
    }
  ],

  "blocks": [
    {
      "type": "manual_product",
      "name": "Manual product",
      "limit": 8,
      "settings": [{ "type": "product", "id": "product", "label": "Product" }]
    }
  ]
}
{% endschema %}
